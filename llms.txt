# Strapi Documentation

- [Account billing details](//cloud/account/account-billing): Manage billing details for Strapi Cloud account.
- [Profile settings](//cloud/account/account-settings): Manage Strapi Cloud account settings.
- [Database](//cloud/advanced/database): Configure your own database on Strapi Cloud.
- [Email Provider](//cloud/advanced/email): Configure Strapi Cloud to use a third-party email provider.
- [Upload Provider](//cloud/advanced/upload): Configure Strapi Cloud to use a third-party upload provider.
- [Command Line Interface (CLI)](//cloud/cli/cloud-cli): <Tldr>
- [Caching & Performance](//cloud/getting-started/caching): <Tldr>
- [Strapi Cloud fundamentals](//cloud/getting-started/cloud-fundamentals): Before going any further into this Strapi Cloud documentation, we recommend you to acknowledge the main concepts below. They will help you to understa...
- [Strapi Cloud - Dashboard deployment](//cloud/getting-started/deployment): Learn how to deploy your Strapi application on Strapi Cloud.
- [Strapi Cloud - CLI deployment](//cloud/getting-started/deployment-cli): Learn how to deploy your Strapi application via the CLI.
- [Project deployment](//cloud/getting-started/deployment-options): Learn how to deploy your Strapi application on Strapi Cloud, via the Cloud dashboard or the CLI.
- [Welcome to the Strapi Cloud Documentation!](//cloud/getting-started/intro): The Strapi Cloud documentation contains all technical documentation related to the setup, deployment, update and customization of your Strapi Cloud account and applications.
- [Information on billing & usage](//cloud/getting-started/usage-billing): This page contains general information related to the usage and billing of your Strapi Cloud account and projects.
- [Collaboration](//cloud/projects/collaboration): Share your projects on Strapi Cloud to collaborate with others.
- [Deployments management](//cloud/projects/deploys): Manage your projects's deployments.
- [Deployment history & logs](//cloud/projects/deploys-history): View projects' deployment history and logs.
- [Notifications](//cloud/projects/notifications): View your notifications on Strapi Cloud.
- [Projects overview](//cloud/projects/overview): View and manage your projects on Strapi Cloud.
- [Runtime logs](//cloud/projects/runtime-logs): View runtime logs of Strapi Cloud project.
- [Project settings](//cloud/projects/settings): View and manage your projects settings on Strapi Cloud.
- [Admin panel customization](//cms/admin-panel-customization): The administration panel of Strapi can be customized according to your needs, so you can make it reflect your identity.
- [Admin panel bundlers](//cms/admin-panel-customization/bundlers): Learn more about configuring Vite and webpack with Strapi 5.
- [Admin panel extension](//cms/admin-panel-customization/extension): Learn more about extending Strapi's admin panel.
- [Favicon](//cms/admin-panel-customization/favicon): Replace the favicon displayed in Strapi's admin panel.
- [Homepage customization](//cms/admin-panel-customization/homepage): Learn about the Strapi admin panel Homepage and how to customize it with widgets.
- [Locales & translations](//cms/admin-panel-customization/locales-translations): Learn how to update locales and extend translations in the Strapi admin panel.
- [Logos](//cms/admin-panel-customization/logos): Customize the logos displayed in Strapi's admin panel.
- [Theme extension](//cms/admin-panel-customization/theme-extension): Extend Strapi's admin panel theme.
- [Customizing the rich text editor](//cms/admin-panel-customization/wysiwyg-editor): Learn more about the various strategies available to customize the WYSIWYG editor in Strapi's admin panel.
- [Strapi Client](//cms/api/client): The Strapi Client library simplifies interactions with your Strapi back end, providing a way to fetch, create, update, and delete content.
- [Content API](//cms/api/content-api): Learn more about Strapi 5's Content API
- [Documents](//cms/api/document): Learn what a Document is in Strapi v5
- [Document Service API](//cms/api/document-service): The Document Service API is the recommended way to interact with your content from the back-end server or from plugins.
- [Using fields with the Document Service API](//cms/api/document-service/fields): Use Strapi's Document Service API to select the fields to return with your queries.
- [Using filters with the Document Service API](//cms/api/document-service/filters): This document provides information about the filters available in the Document Service API.
- [Using the locale parameter with the Document Service API](//cms/api/document-service/locale): Use Strapi's Document Service API to work with locale versions with your queries.
- [Extending the Document Service behavior](//cms/api/document-service/middlewares): This document provides information about the middlewares in the Document Service API.
- [Using Populate with the Document Service API](//cms/api/document-service/populate): Use Strapi's Document Service API to populate or select some fields.
- [Using Sort & Pagination with the Document Service API](//cms/api/document-service/sort-pagination): Use Strapi's Document Service API to sort and paginate query results
- [Using Draft & Publish with the Document Service API](//cms/api/document-service/status): Use Strapi's Document Service API to return either the draft or the published version of a document
- [GraphQL API](//cms/api/graphql): import DeepFilteringBlogLink from '/docs/snippets/deep-filtering-blog.md'
- [OpenAPI specification](//cms/api/openapi): Learn how to generate OpenAPI specifications for your Strapi applications using the @strapi/openapi package
- [REST API reference](//cms/api/rest): Interact with your Content-Types using the REST API endpoints Strapi generates for you.
- [Filters](//cms/api/rest/filters): Use Strapi's REST API to filter the results of your requests.
- [REST API Guides](//cms/api/rest/guides/intro): Deep dive into some specific REST API topics using guides that extensively explain some use cases or give step-by-step instructions.
- [Interactive Query Builder](//cms/api/rest/interactive-query-builder): Use an interactive tool that leverages the querystring library to build your query URL
- [Locale](//cms/api/rest/locale): Browse the REST API reference for the locale parameter to take advantage of the Internationalization feature through REST.
- [Parameters](//cms/api/rest/parameters): Use API parameters to refine your Strapi REST API queries.
- [Populate and Select](//cms/api/rest/populate-select): Use Strapi's REST API to populate or select certain fields.
- [Relations](//cms/api/rest/relations): Use the REST API to manage the order of relations
- [Sort and Pagination](//cms/api/rest/sort-pagination): Use Strapi's REST API to sort or paginate your data.
- [Status](//cms/api/rest/status): Use Strapi's REST API to work with draft or published versions of your documents.
- [Upload files](//cms/api/rest/upload): Learn how to use the /api/upload endpoints to upload files to Strapi with the REST API.
- [Back-end customization](//cms/backend-customization): All elements of Strapi's back end, like routes, policies, middlewares, controllers, services, models, requests, responses, and webhooks, can be customized.
- [Controllers](//cms/backend-customization/controllers): <Tldr>
- [Middlewares](//cms/backend-customization/middlewares): import MiddlewareTypes from '/docs/snippets/middleware-types.md'
- [Models](//cms/backend-customization/models): Strapi models (i.e. content-types, components, and dynamic zones) define a representation of the content structure.
- [Policies](//cms/backend-customization/policies): Strapi policies are functions that execute specific logic on each request before it reaches the controller. Policies can be customized according to your needs.
- [Requests and Responses](//cms/backend-customization/requests-responses): Learn more about requests and responses for Strapi, the most popular headless CMS.
- [Routes](//cms/backend-customization/routes): Strapi routes handle requests to your content and are auto-generated for your content-types. Routes can be customized according to your needs.
- [Services](//cms/backend-customization/services): Strapi services are a set of reusable functions, useful to simplify controllers logic.
- [Webhooks](//cms/backend-customization/webhooks): Strapi webhooks are user-defined HTTP callbacks used by an application to notify other applications that an event occurred.
- [Command Line Interface](//cms/cli): Strapi comes with a full featured Command Line Interface (CLI) which lets you scaffold and manage your project in seconds.
- [Configurations](//cms/configurations): Learn how you can manage and customize the configuration of your Strapi application.
- [API calls configuration](//cms/configurations/api): Strapi's default API parameters can be configured.
- [CRON jobs](//cms/configurations/cron): Strapi allows you to configure cron jobs for execution at specific dates and times, with optional reoccurrence rules.
- [Database configuration](//cms/configurations/database): Strapi offers a single entry point file to configure its databases.
- [Environment variables configuration](//cms/configurations/environment): import SampleEnv from '/docs/snippets/sample-env.md'
- [Features configuration](//cms/configurations/features): Enable experimental Strapi features
- [Lifecycle functions](//cms/configurations/functions): Strapi includes lifecycle functions (e.g. register, bootstrap and destroy) that control the flow of your application.
- [Middlewares configuration](//cms/configurations/middlewares): Strapi offers a single entry point file for its middlewares configurations.
- [Plugins configuration](//cms/configurations/plugins): Strapi plugins have a single entry point file to define their configurations.
- [Server configuration](//cms/configurations/server): Strapi offers a single entry point file for its server configuration.
- [TypeScript configuration](//cms/configurations/typescript): How to configure Strapi for TypeScript development.
- [Customization](//cms/customization): Learn more about Strapi 5 customization possibilities
- [Database migrations](//cms/database-migrations): Strapi database migrations are ways to modify the database
- [Database transactions](//cms/database-transactions): Conceptual guide to transactions in Strapi
- [Deployment](//cms/deployment): Learn how to develop locally with Strapi and deploy Strapi with various hosting options.
- [Error handling](//cms/error-handling): With Strapi's error handling feature it's easy to send and receive errors in your application.
- [Admin panel](//cms/features/admin-panel): Learn to use the admin panel.
- [API Tokens](//cms/features/api-tokens): Learn how you can use API tokens to manage end-users authentication.
- [Audit Logs](//cms/features/audit-logs): Learn how you can use the Audit Logs feature of Strapi 5.
- [Content History](//cms/features/content-history): Learn how you can use the Content History feature of Strapi 5 to browse and restore previous versions of documents from the Content Manager.
- [Content Manager](//cms/features/content-manager): Learn to use the Content Manager.
- [Content-type Builder](//cms/features/content-type-builder): Learn to use the Content-type Builder.
- [Custom Fields](//cms/features/custom-fields): Learn how you can use custom fields to extend Strapi's content-types capabilities.
- [Data Management](//cms/features/data-management): Learn to use the Data Management to import, export, or transfer data between different Strapi instances.
- [Draft & Publish](//cms/features/draft-and-publish): Learn how you can use the Draft & Publish feature of Strapi 5 to manage drafts for content.
- [Email](//cms/features/email): Send email from your server or externals providers.
- [Internationalization](//cms/features/internationalization): Learn how to use the Internationalization (i18n) feature that enables content managers to translate the content
- [Media Library](//cms/features/media-library): Learn to use the Media Library which allows to display and manage all assets uploaded in the application.
- [Preview](//cms/features/preview): With the Preview feature, you can preview your front-end directly from the Content Manager
- [Role-Based Access Control (RBAC)](//cms/features/rbac): Learn to use the RBAC feature which allows to manage the users of the admin panel.
- [Releases](//cms/features/releases): Learn how to use the Releases feature that enables content managers to organize entries to publish/unpublish simultaneously
- [Review Workflows](//cms/features/review-workflows): Learn how to use the Review Workflows feature that enables the creation and management of workflows for your various content-types
- [Single Sign-On (SSO)](//cms/features/sso): Learn to use the SSO feature which manages authentication through an identity provider.
- [Users & Permissions](//cms/features/users-permissions): Learn to use the Users & Permissions and API tokens features to manage end-users.
- [Installation](//cms/installation): Learn many different options to install Strapi and getting started on using it.
- [Additional resources for migrating to Strapi 5](//cms/migration/v4-to-v5/additional-resources/introduction): The following pages cover some dedicated topics for specific use cases when upgrading to Strapi 5. Please ensure you have read the [introduction to up...
- [Breaking changes](//cms/migration/v4-to-v5/breaking-changes): View the list of all breaking changes introduced between Strapi v4 and v5.
- [Upgrading to Strapi 5 - Introduction and FAQ](//cms/migration/v4-to-v5/introduction-and-faq): Learn more about how to upgrade to Strapi 5
- [Step-by-step guide to upgrade to Strapi 5](//cms/migration/v4-to-v5/step-by-step): Follow this step-by-step guide to upgrade from Strapi v4 to Strapi 5
- [Admin Panel API](//cms/plugins-development/admin-panel-api): <Tldr>
- [Content Manager APIs](//cms/plugins-development/content-manager-apis): The Content Manager APIs reference lists the APIs available to plugins for adding actions and options to the Content Manager List view and Edit view.
- [Plugin creation & setup](//cms/plugins-development/create-a-plugin): Learn how to use the Plugin SDK to build and publish a Strapi plugin
- [Developing plugins](//cms/plugins-development/developing-plugins): Generation introduction about Strapi plugins development
- [How to create components for Strapi plugins](//cms/plugins-development/guides/create-components-for-plugins): Learn how to create and configure components for your Strapi plugins
- [How to pass data from server to admin panel with a Strapi plugin](//cms/plugins-development/guides/pass-data-from-server-to-admin): Learn how to pass data from server to admin panel with a Strapi plugin
- [How to store and access data from a Strapi plugin](//cms/plugins-development/guides/store-and-access-data): Learn how to store and access data from a Strapi plugin
- [Plugin SDK](//cms/plugins-development/plugin-sdk): Reference documentation for Strapi's Plugin SDK commands
- [Plugin structure](//cms/plugins-development/plugin-structure): Learn more about the structure of a Strapi plugin
- [Plugins extension](//cms/plugins-development/plugins-extension): <Tldr>
- [Server API for plugins](//cms/plugins-development/server-api): Strapi's Server API for plugins allows a Strapi plugin to customize the back end part (i.e. the server) of your application.
- [Documentation plugin](//cms/plugins/documentation): By using Swagger UI, the API documentation plugin takes out most of your pain to generate your documentation.
- [GraphQL plugin](//cms/plugins/graphql): Use a GraphQL endpoint in your Strapi project to fetch and mutate your content.
- [Installing Plugins via the Marketplace](//cms/plugins/installing-plugins-via-marketplace): <Tldr>
- [Sentry plugin](//cms/plugins/sentry): Track errors in your Strapi application.
- [Project structure](//cms/project-structure): Discover the project structure of any default Strapi application.
- [Quick Start Guide - Strapi Developer Docs](//cms/quick-start): Get ready to get Strapi, your favorite open-source headless cms up and running in less than 3 minutes.
- [Templates](//cms/templates): Use and create pre-made Strapi applications designed for a specific use case.
- [Testing](//cms/testing): Learn how to test your Strapi application with Jest and Supertest.
- [TypeScript](//cms/typescript): Get started with TypeScript for your Strapi application
- [TypeScript development](//cms/typescript/development): Learn more about TypeScript usage with Strapi 5
- [TypeScript Guides](//cms/typescript/guides): Learn how you can leverage TypeScript while developing your Strapi project.
- [Upgrade tool](//cms/upgrade-tool): The Strapi upgrade tool is a CLI command that helps automatically upgrading to a new Strapi version.
Copy
Know More
Ask Genspark
